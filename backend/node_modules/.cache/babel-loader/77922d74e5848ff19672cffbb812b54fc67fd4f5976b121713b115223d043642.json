{"ast":null,"code":"// import React, { useState } from 'react';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faThumbsUp, faThumbsDown, faComment, faUserCircle } from '@fortawesome/free-solid-svg-icons';\n// import './shorts.css';\n\n// const videoData = [\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 2\", description: \"Description for Project 2\" },\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 2\", description: \"Description for Project 2\" },\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 2\", description: \"Description for Project 2\" },\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 4\", description: \"Description for Project 4\" },\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 3\", description: \"Description for Project 3\" },\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 1\", description: \"Description for Project 1\" },\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 2 (Duplicate)\", description: \"Another Description for Project 2\" },\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 2\", description: \"Description for Project 2\" },\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 4 (Duplicate)\", description: \"Another Description for Project 4\" },\n// ];\n\n// const Shorts = () => {\n//     const [reactions, setReactions] = useState(videoData.map(() => ({ liked: false, disliked: false })));\n//     const [descriptionVisible, setDescriptionVisible] = useState(videoData.map(() => false));\n//     const [commentVisible, setCommentVisible] = useState(videoData.map(() => false));\n\n//     const handleReaction = (index, reactionType) => {\n//         setReactions((prevReactions) => {\n//             const newReactions = [...prevReactions];\n\n//             // If not already reacted, update the reaction type\n//             if (!newReactions[index][reactionType]) {\n//                 newReactions[index][reactionType] = true;\n\n//                 // Reset the opposite reaction to false\n//                 newReactions[index][reactionType === 'liked' ? 'disliked' : 'liked'] = false;\n//             }\n\n//             return newReactions;\n//         });\n//     };\n\n//     const toggleDescription = (index) => {\n//         setDescriptionVisible((prevVisibility) => {\n//             const newVisibility = [...prevVisibility];\n//             newVisibility[index] = !newVisibility[index];\n//             return newVisibility;\n//         });\n//     };\n\n//     const toggleComment = (index) => {\n//         setCommentVisible((prevVisibility) => {\n//             const newVisibility = [...prevVisibility];\n//             newVisibility[index] = !newVisibility[index];\n//             return newVisibility;\n//         });\n//     };\n\n//     return (\n//         <div className=\"videos-container\">\n//             {videoData.map((video, index) => (\n//                 <div key={index} className=\"video-card\">\n//                     <video controls>\n//                         <source src={video.src} type=\"video/mp4\" />\n//                         Your browser does not support the video tag.\n//                     </video>\n//                     <div className=\"interaction\">\n//                         <button>\n//                             <FontAwesomeIcon icon={faUserCircle} />\n//                         </button>\n//                         <button\n//                             onClick={() => handleReaction(index, 'liked')}\n//                             disabled={reactions[index].liked} // Disable after like is clicked\n//                         >\n//                             <FontAwesomeIcon icon={faThumbsUp} />\n//                             <p className=\"ptag\">{reactions[index].liked ? 1 : 0}</p>\n//                         </button>\n//                         <button\n//                             onClick={() => handleReaction(index, 'disliked')}\n//                             disabled={reactions[index].disliked} // Disable after dislike is clicked\n//                         >\n//                             <FontAwesomeIcon icon={faThumbsDown} />\n//                             <p className=\"ptag\">{reactions[index].disliked ? 1 : 0}</p>\n//                         </button>\n//                         <button onClick={() => toggleComment(index)}>\n//                             <FontAwesomeIcon icon={faComment} />\n//                         </button>\n//                     </div>\n\n//                     {descriptionVisible[index] && <p className=\"video-description\">{video.description}</p>}\n//                     {commentVisible[index] && (\n//                         <div className=\"comment-section\">\n//                             <textarea placeholder=\"Write a comment...\" className=\"comment-input\"></textarea>\n//                             <button className=\"submit-comment\">Submit</button>\n//                         </div>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default Shorts;","map":{"version":3,"names":[],"sources":["D:/TechTalentConnect/frontend/src/components/Shorts/shorts.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import { faThumbsUp, faThumbsDown, faComment, faUserCircle } from '@fortawesome/free-solid-svg-icons';\r\n// import './shorts.css';\r\n\r\n// const videoData = [\r\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 2\", description: \"Description for Project 2\" },\r\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 2\", description: \"Description for Project 2\" },\r\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 2\", description: \"Description for Project 2\" },\r\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 4\", description: \"Description for Project 4\" },\r\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 3\", description: \"Description for Project 3\" },\r\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 1\", description: \"Description for Project 1\" },\r\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 2 (Duplicate)\", description: \"Another Description for Project 2\" },\r\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 2\", description: \"Description for Project 2\" },\r\n//     { src: require(\"../videos/abcd.mp4\"), title: \"Project 4 (Duplicate)\", description: \"Another Description for Project 4\" },\r\n// ];\r\n\r\n// const Shorts = () => {\r\n//     const [reactions, setReactions] = useState(videoData.map(() => ({ liked: false, disliked: false })));\r\n//     const [descriptionVisible, setDescriptionVisible] = useState(videoData.map(() => false));\r\n//     const [commentVisible, setCommentVisible] = useState(videoData.map(() => false));\r\n\r\n//     const handleReaction = (index, reactionType) => {\r\n//         setReactions((prevReactions) => {\r\n//             const newReactions = [...prevReactions];\r\n\r\n//             // If not already reacted, update the reaction type\r\n//             if (!newReactions[index][reactionType]) {\r\n//                 newReactions[index][reactionType] = true;\r\n\r\n//                 // Reset the opposite reaction to false\r\n//                 newReactions[index][reactionType === 'liked' ? 'disliked' : 'liked'] = false;\r\n//             }\r\n\r\n//             return newReactions;\r\n//         });\r\n//     };\r\n\r\n//     const toggleDescription = (index) => {\r\n//         setDescriptionVisible((prevVisibility) => {\r\n//             const newVisibility = [...prevVisibility];\r\n//             newVisibility[index] = !newVisibility[index];\r\n//             return newVisibility;\r\n//         });\r\n//     };\r\n\r\n//     const toggleComment = (index) => {\r\n//         setCommentVisible((prevVisibility) => {\r\n//             const newVisibility = [...prevVisibility];\r\n//             newVisibility[index] = !newVisibility[index];\r\n//             return newVisibility;\r\n//         });\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"videos-container\">\r\n//             {videoData.map((video, index) => (\r\n//                 <div key={index} className=\"video-card\">\r\n//                     <video controls>\r\n//                         <source src={video.src} type=\"video/mp4\" />\r\n//                         Your browser does not support the video tag.\r\n//                     </video>\r\n//                     <div className=\"interaction\">\r\n//                         <button>\r\n//                             <FontAwesomeIcon icon={faUserCircle} />\r\n//                         </button>\r\n//                         <button\r\n//                             onClick={() => handleReaction(index, 'liked')}\r\n//                             disabled={reactions[index].liked} // Disable after like is clicked\r\n//                         >\r\n//                             <FontAwesomeIcon icon={faThumbsUp} />\r\n//                             <p className=\"ptag\">{reactions[index].liked ? 1 : 0}</p>\r\n//                         </button>\r\n//                         <button\r\n//                             onClick={() => handleReaction(index, 'disliked')}\r\n//                             disabled={reactions[index].disliked} // Disable after dislike is clicked\r\n//                         >\r\n//                             <FontAwesomeIcon icon={faThumbsDown} />\r\n//                             <p className=\"ptag\">{reactions[index].disliked ? 1 : 0}</p>\r\n//                         </button>\r\n//                         <button onClick={() => toggleComment(index)}>\r\n//                             <FontAwesomeIcon icon={faComment} />\r\n//                         </button>\r\n//                     </div>\r\n\r\n//                     {descriptionVisible[index] && <p className=\"video-description\">{video.description}</p>}\r\n//                     {commentVisible[index] && (\r\n//                         <div className=\"comment-section\">\r\n//                             <textarea placeholder=\"Write a comment...\" className=\"comment-input\"></textarea>\r\n//                             <button className=\"submit-comment\">Submit</button>\r\n//                         </div>\r\n//                     )}\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Shorts;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}